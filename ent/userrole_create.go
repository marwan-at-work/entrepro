// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"repro/ent/role"
	"repro/ent/user"
	"repro/ent/userrole"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserRoleCreate is the builder for creating a UserRole entity.
type UserRoleCreate struct {
	config
	mutation *UserRoleMutation
	hooks    []Hook
}

// SetTargetID sets the "target_id" field.
func (urc *UserRoleCreate) SetTargetID(i int) *UserRoleCreate {
	urc.mutation.SetTargetID(i)
	return urc
}

// SetTargetType sets the "target_type" field.
func (urc *UserRoleCreate) SetTargetType(s string) *UserRoleCreate {
	urc.mutation.SetTargetType(s)
	return urc
}

// SetActorType sets the "actor_type" field.
func (urc *UserRoleCreate) SetActorType(s string) *UserRoleCreate {
	urc.mutation.SetActorType(s)
	return urc
}

// SetActorID sets the "actor_id" field.
func (urc *UserRoleCreate) SetActorID(i int) *UserRoleCreate {
	urc.mutation.SetActorID(i)
	return urc
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (urc *UserRoleCreate) SetRoleID(id int) *UserRoleCreate {
	urc.mutation.SetRoleID(id)
	return urc
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (urc *UserRoleCreate) SetNillableRoleID(id *int) *UserRoleCreate {
	if id != nil {
		urc = urc.SetRoleID(*id)
	}
	return urc
}

// SetRole sets the "role" edge to the Role entity.
func (urc *UserRoleCreate) SetRole(r *Role) *UserRoleCreate {
	return urc.SetRoleID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (urc *UserRoleCreate) SetUserID(id int) *UserRoleCreate {
	urc.mutation.SetUserID(id)
	return urc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (urc *UserRoleCreate) SetNillableUserID(id *int) *UserRoleCreate {
	if id != nil {
		urc = urc.SetUserID(*id)
	}
	return urc
}

// SetUser sets the "user" edge to the User entity.
func (urc *UserRoleCreate) SetUser(u *User) *UserRoleCreate {
	return urc.SetUserID(u.ID)
}

// Mutation returns the UserRoleMutation object of the builder.
func (urc *UserRoleCreate) Mutation() *UserRoleMutation {
	return urc.mutation
}

// Save creates the UserRole in the database.
func (urc *UserRoleCreate) Save(ctx context.Context) (*UserRole, error) {
	var (
		err  error
		node *UserRole
	)
	if len(urc.hooks) == 0 {
		if err = urc.check(); err != nil {
			return nil, err
		}
		node, err = urc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = urc.check(); err != nil {
				return nil, err
			}
			urc.mutation = mutation
			node, err = urc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(urc.hooks) - 1; i >= 0; i-- {
			mut = urc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserRoleCreate) SaveX(ctx context.Context) *UserRole {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserRoleCreate) check() error {
	if _, ok := urc.mutation.TargetID(); !ok {
		return &ValidationError{Name: "target_id", err: errors.New("ent: missing required field \"target_id\"")}
	}
	if _, ok := urc.mutation.TargetType(); !ok {
		return &ValidationError{Name: "target_type", err: errors.New("ent: missing required field \"target_type\"")}
	}
	if _, ok := urc.mutation.ActorType(); !ok {
		return &ValidationError{Name: "actor_type", err: errors.New("ent: missing required field \"actor_type\"")}
	}
	if _, ok := urc.mutation.ActorID(); !ok {
		return &ValidationError{Name: "actor_id", err: errors.New("ent: missing required field \"actor_id\"")}
	}
	return nil
}

func (urc *UserRoleCreate) sqlSave(ctx context.Context) (*UserRole, error) {
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (urc *UserRoleCreate) createSpec() (*UserRole, *sqlgraph.CreateSpec) {
	var (
		_node = &UserRole{config: urc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userrole.FieldID,
			},
		}
	)
	if value, ok := urc.mutation.TargetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userrole.FieldTargetID,
		})
		_node.TargetID = value
	}
	if value, ok := urc.mutation.TargetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userrole.FieldTargetType,
		})
		_node.TargetType = value
	}
	if value, ok := urc.mutation.ActorType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userrole.FieldActorType,
		})
		_node.ActorType = value
	}
	if value, ok := urc.mutation.ActorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userrole.FieldActorID,
		})
		_node.ActorID = value
	}
	if nodes := urc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := urc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserRoleCreateBulk is the builder for creating many UserRole entities in bulk.
type UserRoleCreateBulk struct {
	config
	builders []*UserRoleCreate
}

// Save creates the UserRole entities in the database.
func (urcb *UserRoleCreateBulk) Save(ctx context.Context) ([]*UserRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserRole, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserRoleCreateBulk) SaveX(ctx context.Context) []*UserRole {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
