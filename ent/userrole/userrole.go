// Code generated by entc, DO NOT EDIT.

package userrole

const (
	// Label holds the string label denoting the userrole type in the database.
	Label = "user_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTargetID holds the string denoting the target_id field in the database.
	FieldTargetID = "target_id"
	// FieldTargetType holds the string denoting the target_type field in the database.
	FieldTargetType = "target_type"
	// FieldActorType holds the string denoting the actor_type field in the database.
	FieldActorType = "actor_type"
	// FieldActorID holds the string denoting the actor_id field in the database.
	FieldActorID = "actor_id"

	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"

	// Table holds the table name of the userrole in the database.
	Table = "user_roles"
	// RoleTable is the table the holds the role relation/edge.
	RoleTable = "user_roles"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "user_roles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "actor_id"
)

// Columns holds all SQL columns for userrole fields.
var Columns = []string{
	FieldID,
	FieldTargetID,
	FieldTargetType,
	FieldActorType,
	FieldActorID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the UserRole type.
var ForeignKeys = []string{
	"role_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
