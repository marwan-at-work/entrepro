// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"entrepro/ent/spec"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SpecCreate is the builder for creating a Spec entity.
type SpecCreate struct {
	config
	id *string
}

// SetID sets the id field.
func (sc *SpecCreate) SetID(s string) *SpecCreate {
	sc.id = &s
	return sc
}

// Save creates the Spec in the database.
func (sc *SpecCreate) Save(ctx context.Context) (*Spec, error) {
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpecCreate) SaveX(ctx context.Context) *Spec {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SpecCreate) sqlSave(ctx context.Context) (*Spec, error) {
	var (
		s     = &Spec{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: spec.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: spec.FieldID,
			},
		}
	)
	if value := sc.id; value != nil {
		s.ID = *value
		_spec.ID.Value = *value
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
